<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2021/11/20/Docker-install-bt-panel/"/>
    <url>/blog/2021/11/20/Docker-install-bt-panel/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-安装宝塔面板"><a href="#Docker-安装宝塔面板" class="headerlink" title="Docker  安装宝塔面板"></a>Docker  安装宝塔面板</h1><p>怎么在docker中安装宝塔面板？<br>先打个岔，这些命令总是记不住，所以记录在本文中，以便将来查询：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 列出所有的容器 ID</span><br>docker ps -aq<br><span class="hljs-meta">#</span><span class="bash"> 停止所有的容器</span><br>docker stop $(docker ps -aq)<br><span class="hljs-meta">#</span><span class="bash"> 删除所有的容器</span><br>docker rm $(docker ps -aq)<br><span class="hljs-meta">#</span><span class="bash"> 删除所有的镜像</span><br>docker rmi $(docker images -q)<br><br></code></pre></td></tr></table></figure><ul><li><code>docker image prune --force --all</code>或者<code>docker image prune -f -a </code>: 删除所有不使用的镜像</li><li><code>docker container prune</code>: 删除所有停止的容器</li></ul><p>好啦，不废话啦，我们进入正题：</p><ol><li>下载一个docker镜像(用Ubuntu还是CentOS大家可以任选其一,这里我用CentOS)：</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker pull centos</span><br></code></pre></td></tr></table></figure><ol start="2"><li>创建docker容器：</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -i -t -d --name baota -p <span class="hljs-number">20</span>:<span class="hljs-number">20</span> -p <span class="hljs-number">21</span>:<span class="hljs-number">21</span> -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> -p <span class="hljs-number">443</span>:<span class="hljs-number">443</span> -p <span class="hljs-number">888</span>:<span class="hljs-number">888</span> -p <span class="hljs-number">8888</span>:<span class="hljs-number">8888</span> --privileged=true -v /home/www:/www centos<br></code></pre></td></tr></table></figure><p>解释：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">上面命令的意思是创建一个docker容易命名为baota(名称大家自定义)让他后台运行，然后将宿主机的<span class="hljs-number">20</span>，<span class="hljs-number">21</span>，<span class="hljs-number">80</span>，<span class="hljs-number">443</span>，<span class="hljs-number">888</span>，<span class="hljs-number">8888</span>这五个端口映射到docker容器中去。<br>并且将宿主机的<span class="hljs-regexp">/home/</span>www文件夹映射到docker容器的/www上去(注意：文件目录如果不存在。宿主机和容器会自己创建，无需手动创建)。privileged表示在运行容器的时候，给容器加特权，设置容器有写文件的权限。<br></code></pre></td></tr></table></figure><ol start="3"><li>进入容器：使用docker ps 查看</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker exec -it d497dcfd6062  <span class="hljs-regexp">/bin/</span>bash(这里也可以直接用 bash)或者下面都行<br>docker exec -it baota <span class="hljs-regexp">/bin/</span>bash<br></code></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/1102222/201905/1102222-20190510155301608-1157763860.png" alt="img"></p><ol start="4"><li>执行宝塔面板Centos安装命令</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y wget &amp;&amp; wget -O <span class="hljs-keyword">install</span>.sh http://download.bt.cn/<span class="hljs-keyword">install</span>/<span class="hljs-keyword">install</span>.sh &amp;&amp; sh <span class="hljs-keyword">install</span>.sh<br></code></pre></td></tr></table></figure><p>期间会有一个安装确认，输入y。然后就静心等着安装吧。。。<br><img src="https://img2018.cnblogs.com/blog/1102222/201905/1102222-20190510161429511-847170139.png" alt="img"></p><p><img src="https://img2018.cnblogs.com/blog/1102222/201905/1102222-20190510161556720-265711669.png" alt="img"></p><p>那么问题来了。。。。。。。。。。。。。。。。</p><p>安装至此结束，如果重启容器 宝塔会丢失吗？不会滴，我们试试：<br><img src="https://img2018.cnblogs.com/blog/1102222/201905/1102222-20190510162101093-1484931864.png" alt="img"></p><p>上面我们可以看到宝塔应用还在，如果服务器断电或者重启了，也就是docker service重启了，宝塔还在吗？我们试试</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service docker restart</span><br></code></pre></td></tr></table></figure><p>接下里我们进入容器:<br>使用：docker ps -a 查看所有容器。docker attach 容器id或者直接 docker attach baota<br><img src="https://img2018.cnblogs.com/blog/1102222/201905/1102222-20190510163122798-496546517.png" alt="img"></p><p>特别注意：为了能够保存（持久化）数据以及共享容器间的数据,docker一定使用-v挂载主机目录到容器，比如上面启动容器的 docker -v 参数。<br>**补充：宝塔默认密码使用 : bt default 查看，登录进去修改即可。如果上面安装的不是最新宝塔，可以再容器里面执行下面命令升级到最新：<br>**</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl http:<span class="hljs-regexp">//</span>download.bt.cn<span class="hljs-regexp">/install/u</span>pdate_to_6.sh|bash<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs log">==================================================================<br>Congratulations! Installed successfully!<br>==================================================================<br>外网面板地址: http://182.35.99.8:8888/9550d369<br>内网面板地址: http://172.17.0.2:8888/9550d369<br>username: 7iwrpwqo<br>password: dd84f64d<br>If you cannot access the panel,<br>release the following panel port [8888] in the security group<br>若无法访问面板，请检查防火墙/安全组是否有放行面板[8888]端口<br>==================================================================<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/blog/2021/11/20/hello-world/"/>
    <url>/blog/2021/11/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
